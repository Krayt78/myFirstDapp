{"version":3,"sources":["getWeb3.js","App.js","Proposal.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","on","location","reload","App","Component","state","isAdmin","isVoter","accounts","connectedAccount","workflowStatus","contract","proposals","componentWillMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","methods","owner","call","from","workflowStatusTemp","convertWorkflowStatus","options","fromBlock","toBlock","getPastEvents","table","forEach","element","returnValues","getVoter","isAVoter","message","indexOf","setState","runInit","alert","error","updateWorflowStatus","updateIsVoterStatus","status","result","switchNextWorkflowStatus","startProposalsRegistering","send","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","document","getElementById","value","voter","addVoter","addProposal","proposal","getProposal","proposalID","getOneProposal","this","isAdminRenderHello","className","isAdminRender","type","id","placeholder","onClick","isVoterRender","workflowButton","map","style","display","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.278430d6.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n\n    window.ethereum.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    window.ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport Proposal from './Proposal.js'\n\nclass App extends Component {\n  state = { web3: null, isAdmin: false, isVoter:false, accounts: null, connectedAccount: 0, workflowStatus:\"\", contract: null, proposals:null};\n\n  componentWillMount = async () => {\n    try {\n      // Récupérer le provider web3\n      const web3 = await getWeb3();\n  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract “Whitelist” avec web3 et les informations du déploiement du fichier (client/src/contracts/Whitelist.json)\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n  \n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const owner = await instance.methods.owner().call();\n      let isAdmin = accounts[0] === owner;\n\n      let workflowStatusTemp = await instance.methods.workflowStatus().call({from: accounts[0]});\n      let workflowStatus = this.convertWorkflowStatus(workflowStatusTemp);\n\n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n\n      let proposals = await instance.getPastEvents('ProposalRegistered', options);\n\n      console.table(proposals);\n\n      proposals.forEach(element => {\n        console.log(element.returnValues[0]);\n      });\n\n      let isVoter = false;\n\n      try{\n        let isAVoter = await instance.methods.getVoter(accounts[0]).call({from: accounts[0]});\n        isVoter = isAVoter[0];\n        console.log(isAVoter[0]);\n      }\n      catch (error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n          isVoter = false;\n        }\n      }\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, isAdmin, isVoter, accounts, connectedAccount: accounts[0], workflowStatus, contract: instance, proposals}, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    this.updateWorflowStatus();\n    this.updateIsVoterStatus();\n  }; \n\n  updateIsVoterStatus = async() =>{\n    const { contract, accounts} = this.state;\n\n    try{\n      let isAVoter = await contract.methods.getVoter(accounts[0]).call({from: accounts[0]});\n      this.state.isVoter = isAVoter[0];\n      console.log(isAVoter[0]);\n    }\n    catch (error){\n      const stringError = error.message;\n\n      if(stringError.indexOf(\"You're not a voter\") !== -1){\n        this.state.isVoter = false;\n      }\n    }\n    \n  }\n\n  updateWorflowStatus = async() =>{\n    const { contract, accounts} = this.state;\n    let workflowStatusTemp = await contract.methods.workflowStatus().call({from: accounts[0]});\n    console.log(\"WorkflowStatusTemp : \"+workflowStatusTemp);\n    this.state.workflowStatus = this.convertWorkflowStatus(workflowStatusTemp);\n  }\n\n  convertWorkflowStatus = (status) =>{\n    let result = \"\";\n    console.log(typeof(+status));\n    switch(+status){\n      case 0: \n        result = \"RegisteringVoters\";\n      break;\n\n      case 1: \n        result = \"ProposalsRegistrationStarted\";\n      break;\n\n      case 2: \n        result = \"ProposalsRegistrationEnded\";\n      break;\n\n      case 3: \n        result = \"VotingSessionStarted\";\n      break;\n\n      case 4: \n        result = \"VotingSessionEnded\";\n      break;\n\n      case 5: \n        result = \"VotesTallied\";\n      break;\n\n      default :\n        result =\"Shouldnt Happen\";\n      break;\n    }\n    console.log(result);\n    return result;\n  }; \n\n  switchNextWorkflowStatus = async() =>{\n    const { contract, accounts} = this.state;\n    let workflowStatusTemp = await contract.methods.workflowStatus().call({from: accounts[0]});\n\n    switch(+workflowStatusTemp){\n        case 0: \n          await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n        break;\n  \n        case 1: \n          await contract.methods.endProposalsRegistering().send({from: accounts[0]});\n        break;\n  \n        case 2: \n          await contract.methods.startVotingSession().send({from: accounts[0]});\n        break;\n  \n        case 3: \n          await contract.methods.endVotingSession().send({from: accounts[0]});\n        break;\n  \n        case 4: \n          await contract.methods.tallyVotes().send({from: accounts[0]});\n        break;\n  \n        case 5: \n        // would have reset\n        break;\n  \n        default :\n          console.log(\"Shouldnt Happen\");\n        break;\n\n    }\n  };\n\n  getVoter = async() => {\n    const { accounts, contract } = this.state;\n    let address = document.getElementById(\"getVoterAddress\").value;\n\n    if(address){\n      try{\n        let voter = await contract.methods.getVoter(address).call({from: accounts[0]});\n        console.log(voter);\n      }\n      catch(error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n          this.state.isVoter = false;\n        }\n\n      }\n    }\n  }\n\n  addVoter = async() => {\n    const { accounts, contract } = this.state;\n    let address=document.getElementById(\"addVoterAddress\").value;\n\n    if(address){\n      await contract.methods.addVoter(address).send({from: accounts[0]});\n      console.log(\"added voter\");\n      let voter = await contract.methods.getVoter(address).call({from: accounts[0]});\n      console.log(voter);\n    }\n  }\n\n  addProposal = async() => {\n    const { accounts, contract } = this.state;\n    let proposal=document.getElementById(\"proposal\").value;\n\n    if(proposal){\n      await contract.methods.addProposal(proposal).send({from: accounts[0]});\n      console.log(\"added proposal\");\n    }\n  }\n\n  getProposal = async() => {\n    const { accounts, contract } = this.state;\n    let proposalID=document.getElementById(\"proposalID\").value;\n\n    if(proposalID){\n      try{\n        let proposal = await contract.methods.getOneProposal(proposalID).call({from: accounts[0]});\n        console.log(proposal);\n        window.alert('Proposal ID : '+proposalID+\" / Description : \"+ proposal[0]+ \" / Vote Count : \"+ proposal[1])\n      }\n      catch(error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n        }\n\n      }\n    }\n  }\n\n  \n\n  \n \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const isAdminRenderHello =(\n      <div className=\"IsAdmin\" >\n        <p>Welcome Admin ! :)      \n        </p>\n      </div>\n    );\n\n    const isAdminRender = (\n      <div className=\"App\" >\n        <div className=\"AddVoter\" >\n          <p>Hi Admin, You can AddVoter:          \n            <br />\n            <input type=\"text\" id=\"addVoterAddress\" placeholder=\"Voter Address\"/>\n            <br />\n            <button onClick={this.addVoter}>Add Voter</button>\n          </p>\n        </div>\n\n        <div className=\"GetVoter\" >\n          <p>Hi Admin, You can GetVoter:          \n            <br />\n            <input type=\"text\" id=\"getVoterAddress\" placeholder=\"Voter Address\"/>\n            <br />\n            <button onClick={this.getVoter}>Get Voter</button>\n          </p>\n        </div>\n\n        <br></br>\n      </div>\n    );\n\n    const testComponent = (\n      <div className=\"Proposal\" >\n          \n          <Proposal id={0} description={\"test\"}></Proposal>\n      </div>\n    );\n    const isVoterRender = (\n      <div className=\"IsVoter\" >\n        <div className=\"isAVoter\" >\n          <p>You are a Voter !     \n          </p>\n        </div>\n          \n\n          <div className=\"AddProposal\" >\n            <p>Add a Proposal\n            <br />\n            <input type=\"text\" id=\"proposal\" placeholder=\"proposal description\"/>\n            <br />\n            <button onClick={this.addProposal}>AddProposal</button>    \n            </p>\n          </div>\n\n          <div className=\"GetProposal\" >\n              <p>Get a proposal \n              <br />\n              <input type=\"text\" id=\"proposalID\" placeholder=\"proposal ID\"/>\n              <br />\n              <button onClick={this.getProposal}>GetProposal</button>   \n              </p>\n          </div>\n\n      </div>\n    );\n\n    const testMap = (\n      <table>\n          {this.state.proposals.map((proposal) => (\n            <tr><td>{0}</td><td>{1}</td></tr>\n          ))}\n        </table>\n    );\n\n    const workflowButton = (\n      <div className=\"WorkflowButton\" >\n              <button onClick={this.switchNextWorkflowStatus}>Next Workflow</button>  \n      </div>\n    );\n\n    return(\n      <div className=\"App\" >\n          <div className=\"Header\" style={{display: 'flex'}}>\n                <h2 className=\"Title\">Voting System</h2>\n                <h2 className=\"MetamaskAccount\"> Metamask account : {this.state.connectedAccount}</h2>\n          </div>\n\n          <div className=\"WorkflowStatus\" >\n            <p>\n              WorkflowStatus : {this.state.workflowStatus}      \n            </p>\n          </div>\n\n          {workflowButton}\n\n        \n\n        {this.state.isAdmin ? isAdminRenderHello : <div></div>}\n        {this.state.isVoter ? isVoterRender : <div></div>}\n        {this.state.isAdmin ? isAdminRender : <div></div>}\n\n      </div>\n\n    );\n    \n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nexport default class Proposal extends Component {\n  render() {\n    return(\n      <div className=\"proposal\">\n        <p>{this.props.id}</p>\n        <p>{this.props.description}</p>\n    </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}